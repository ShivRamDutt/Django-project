[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "UserPassesTestMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "SuccessMessageMixin",
        "importPath": "django.contrib.messages.views",
        "description": "django.contrib.messages.views",
        "isExtraImport": true,
        "detail": "django.contrib.messages.views",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "website.core.migrations.0001_initial",
        "description": "website.core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='BlogModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "website.core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "website.core.migrations.0002_alter_blogmodel_title_delete_viewsmodel",
        "description": "website.core.migrations.0002_alter_blogmodel_title_delete_viewsmodel",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='blogmodel',\n            name='title',\n            field=models.CharField(max_length=200, unique=True),\n        ),",
        "detail": "website.core.migrations.0002_alter_blogmodel_title_delete_viewsmodel",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "website.core.migrations.0003_remove_blogmodel_likes",
        "description": "website.core.migrations.0003_remove_blogmodel_likes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0002_alter_blogmodel_title_delete_viewsmodel'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='blogmodel',\n            name='likes',\n        ),\n    ]",
        "detail": "website.core.migrations.0003_remove_blogmodel_likes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "website.core.migrations.0004_remove_commentmodel_user_name_commentmodel_user",
        "description": "website.core.migrations.0004_remove_commentmodel_user_name_commentmodel_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('core', '0003_remove_blogmodel_likes'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='commentmodel',\n            name='user_name',\n        ),",
        "detail": "website.core.migrations.0004_remove_commentmodel_user_name_commentmodel_user",
        "documentation": {}
    },
    {
        "label": "LikeToggleAPIView",
        "kind": 6,
        "importPath": "website.core.api_views",
        "description": "website.core.api_views",
        "peekOfCode": "class LikeToggleAPIView(APIView):\n    def post(self, request, *args, **kwargs):\n        serializer = LikeToggleSerializer(data=request.data)\n        if serializer.is_valid() and request.user.is_authenticated:\n            blog_id = serializer.validated_data['blog_id']\n            blog = get_object_or_404(BlogModel, id=blog_id)\n            user = request.user\n            # Toggle like/unlike\n            liked, created = LikeModel.objects.get_or_create(blog=blog, user=user)\n            if not created:",
        "detail": "website.core.api_views",
        "documentation": {}
    },
    {
        "label": "CommentCreateAPI",
        "kind": 6,
        "importPath": "website.core.api_views",
        "description": "website.core.api_views",
        "peekOfCode": "class CommentCreateAPI(APIView):\n    def post(self, request, blog_id):\n        # Check if the user is authenticated\n        if not request.user.is_authenticated:\n            return Response({'message': 'Authentication required'}, status=status.HTTP_401_UNAUTHORIZED)\n        # Get the associated blog\n        blog = get_object_or_404(BlogModel, pk=blog_id)\n        # Create a Comment instance\n        serializer = CommentSerializer(data=request.data)\n        if serializer.is_valid():",
        "detail": "website.core.api_views",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "website.core.apps",
        "description": "website.core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "website.core.apps",
        "documentation": {}
    },
    {
        "label": "CommentForm",
        "kind": 6,
        "importPath": "website.core.forms",
        "description": "website.core.forms",
        "peekOfCode": "class CommentForm(forms.ModelForm):\n    class Meta:\n        model = CommentModel\n        fields = ['text']",
        "detail": "website.core.forms",
        "documentation": {}
    },
    {
        "label": "BlogModel",
        "kind": 6,
        "importPath": "website.core.models",
        "description": "website.core.models",
        "peekOfCode": "class BlogModel(models.Model):\n    title = models.CharField(max_length=200, unique=True)\n    content = models.TextField()\n    media = models.ImageField(upload_to='blog_media/', blank=True, null=True)\n    views = models.PositiveIntegerField(default=0)\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.title\n    def get_absolute_url(self):",
        "detail": "website.core.models",
        "documentation": {}
    },
    {
        "label": "CommentModel",
        "kind": 6,
        "importPath": "website.core.models",
        "description": "website.core.models",
        "peekOfCode": "class CommentModel(models.Model):\n    blog = models.ForeignKey(BlogModel, on_delete=models.CASCADE)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True)\n    text = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"Comment by {self.user.username} on {self.blog.title}\"\nclass LikeModel(models.Model):\n    blog = models.ForeignKey(BlogModel, on_delete=models.CASCADE)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)",
        "detail": "website.core.models",
        "documentation": {}
    },
    {
        "label": "LikeModel",
        "kind": 6,
        "importPath": "website.core.models",
        "description": "website.core.models",
        "peekOfCode": "class LikeModel(models.Model):\n    blog = models.ForeignKey(BlogModel, on_delete=models.CASCADE)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    def __str__(self):\n        return f\"{self.user.username} liked {self.blog.title}\"",
        "detail": "website.core.models",
        "documentation": {}
    },
    {
        "label": "LikeToggleSerializer",
        "kind": 6,
        "importPath": "website.core.serializers",
        "description": "website.core.serializers",
        "peekOfCode": "class LikeToggleSerializer(serializers.Serializer):\n    blog_id = serializers.IntegerField()\nclass CommentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CommentModel\n        fields = ['text']",
        "detail": "website.core.serializers",
        "documentation": {}
    },
    {
        "label": "CommentSerializer",
        "kind": 6,
        "importPath": "website.core.serializers",
        "description": "website.core.serializers",
        "peekOfCode": "class CommentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CommentModel\n        fields = ['text']",
        "detail": "website.core.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "website.core.urls",
        "description": "website.core.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.HomePageView.as_view(), name='home'),\n    path('blog/post/', views.BlogCreateView.as_view(), name='post'),\n    path('blog/<int:pk>/', views.BlogDetailView.as_view(), name='blog_detail'),\n    path('blog/update/<int:pk>/', views.BlogUpdateView.as_view(), name='blog_update'),\n    path('blog/delete/<int:pk>/', views.BlogDeleteView.as_view(), name='blog_delete'),\n    # API\n    path('api/like-toggle/', api_views.LikeToggleAPIView.as_view(), name='like-toggle'),\n    path('api/blog/<int:blog_id>/comment/', api_views.CommentCreateAPI.as_view(), name='create_comment_api'),\n    # Authentication URLs",
        "detail": "website.core.urls",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "website.core.views",
        "description": "website.core.views",
        "peekOfCode": "class LoginView(auth_views.LoginView):\n    template_name = 'core/form.html'    \n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['title'] = 'Login'\n        context['form_title'] = 'Login'\n        context['form_btn'] = 'Login'\n        return context\nclass RegisterView(View):\n    template_name = 'core/form.html'",
        "detail": "website.core.views",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "website.core.views",
        "description": "website.core.views",
        "peekOfCode": "class RegisterView(View):\n    template_name = 'core/form.html'\n    def get(self, request):\n        form = UserCreationForm()\n        return render(request, self.template_name, {'form': form, 'form_title': 'Register', 'form_btn': 'Register', 'title': 'Register'})\n    def post(self, request):\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)",
        "detail": "website.core.views",
        "documentation": {}
    },
    {
        "label": "HomePageView",
        "kind": 6,
        "importPath": "website.core.views",
        "description": "website.core.views",
        "peekOfCode": "class HomePageView(ListView):\n    model = BlogModel\n    template_name = 'core/index.html'\n    context_object_name = 'blogs'\n    ordering = ['-created_at']\n    paginate_by = 10\n    def get_queryset(self):\n        search_query = self.request.GET.get('search')\n        sorted_by = self.request.GET.get('sorted_by')\n        # Start with the default queryset",
        "detail": "website.core.views",
        "documentation": {}
    },
    {
        "label": "BlogDetailView",
        "kind": 6,
        "importPath": "website.core.views",
        "description": "website.core.views",
        "peekOfCode": "class BlogDetailView(DetailView):\n    model = BlogModel\n    template_name = 'core/blog_detail.html'\n    context_object_name = 'blog'\n    def get(self, request, *args, **kwargs):\n        # Get the blog object\n        blog = self.get_object()\n        # Increment the views count by 1\n        blog.views += 1\n        blog.save()",
        "detail": "website.core.views",
        "documentation": {}
    },
    {
        "label": "BlogCreateView",
        "kind": 6,
        "importPath": "website.core.views",
        "description": "website.core.views",
        "peekOfCode": "class BlogCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):\n    model = BlogModel\n    template_name = 'core/form.html'\n    fields = ['title', 'content', 'media']\n    success_message = 'The blog post was successfully posted.'\n    def form_valid(self, form):\n        form.instance.author = self.request.user\n        return super().form_valid(form)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)",
        "detail": "website.core.views",
        "documentation": {}
    },
    {
        "label": "BlogUpdateView",
        "kind": 6,
        "importPath": "website.core.views",
        "description": "website.core.views",
        "peekOfCode": "class BlogUpdateView(LoginRequiredMixin, UserPassesTestMixin, SuccessMessageMixin, UpdateView):\n    model = BlogModel\n    template_name = 'core/form.html'\n    fields = ['title', 'content', 'media']\n    success_message = 'The blog post was successfully updated.'\n    def test_func(self):\n        # Check if the authenticated user is the author of the blog\n        return self.get_object().author == self.request.user\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)",
        "detail": "website.core.views",
        "documentation": {}
    },
    {
        "label": "BlogDeleteView",
        "kind": 6,
        "importPath": "website.core.views",
        "description": "website.core.views",
        "peekOfCode": "class BlogDeleteView(LoginRequiredMixin, UserPassesTestMixin, SuccessMessageMixin, DeleteView):\n    model = BlogModel\n    template_name = 'core/blog_delete.html'\n    success_url = reverse_lazy('home')  # Redirect to the home page after deletion\n    context_object_name = 'blog'\n    success_message = 'The blog post was successfully deleted.'\n    def test_func(self):\n        # Check if the authenticated user is the author of the blog\n        return self.get_object().author == self.request.user\n    def get_context_data(self, **kwargs):",
        "detail": "website.core.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "website.website.asgi",
        "description": "website.website.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "website.website.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-c7k(2^f%vzp*u1=w@2w+d6u$sz(l=^3c2_4b2gwn1#5b*c4ze1'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-c7k(2^f%vzp*u1=w@2w+d6u$sz(l=^3c2_4b2gwn1#5b*c4ze1'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    # Built-in\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    # Built-in\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    # Built-in\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    # Built-in\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third party\n    'rest_framework',",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'website.urls'",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "ROOT_URLCONF = 'website.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "WSGI_APPLICATION = 'website.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'Asia/Manila'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "TIME_ZONE = 'Asia/Manila'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Media URL and root settings",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Media URL and root settings\nMEDIA_URL = '/media/'",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Media URL and root settings\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Media URL and root settings\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\n# Auth",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Media URL and root settings\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\n# Auth\nLOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'home'",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\n# Auth\nLOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'login'",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'media'\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\n# Auth\nLOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'login'",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = 'bootstrap4'\n# Auth\nLOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'login'",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "LOGIN_URL = 'login'\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'login'",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'login'",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "website.website.settings",
        "description": "website.website.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = 'login'",
        "detail": "website.website.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "website.website.urls",
        "description": "website.website.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('core.urls')),\n]\n# Serve media files during development\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "website.website.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "website.website.wsgi",
        "description": "website.website.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "website.website.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "website.manage",
        "description": "website.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'website.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "website.manage",
        "documentation": {}
    }
]